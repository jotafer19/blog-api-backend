// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String    @db.VarChar(50)
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  role      Role      @default(BASIC)
  posts     Post[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Role {
  BASIC
  ADMIN
}

model Post {
  id          String    @id @default(uuid())
  title       String    @db.VarChar(255)
  content     String    @db.Text
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  comments    Comment[]
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Si filtro mucho por authorId y isPublished al mismo tiempo, usar @@index([authorId, isPublished])
  @@index([authorId])
  @@index([isPublished])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId  String?
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
